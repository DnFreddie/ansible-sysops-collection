- name: Check if node is already running
  ansible.builtin.service_facts:

- name: Download node if service doesn't exist or update is requested
  block:
    - name: Fetch latest node release
      ansible.builtin.uri:
        url: "{{ url }}"
        return_content: true
      register: release_data

    - name: Get release URL
      ansible.builtin.set_fact:
        _release: >-
          {{ release_data.json.assets | selectattr('name', 'search', 'linux-amd64.tar.gz') | map(attribute='browser_download_url') | first | default('') }}
      no_log: true

    - name: Fail if node download URL is empty
      ansible.builtin.fail:
        msg: "Failed to fetch node download URL"
      when: _release == ""

    - name: Remove existing node binary
      ansible.builtin.file:
        path: "{{ dir.install }}/node_exporter"
        state: absent
      when: update | bool

    - name: Create installation directory
      ansible.builtin.file:
        state: directory
        mode: "0755"
        path: "{{ dir.install }}"

    - name: Download and extract node
      ansible.builtin.unarchive:
        src: "{{ _release }}"
        dest: "{{ dir.install }}"
        remote_src: yes
        extra_opts:
          - "--strip=1"
          - "--no-anchored"
          - "node_exporter"
        creates: "{{ dir.install }}/node_exporter"
  when: (ansible_facts['services'].get('node_exporter.service', {}).get('status', 'not-found') == 'not-found') or (update | default(false) | bool)
  notify: node_restart

